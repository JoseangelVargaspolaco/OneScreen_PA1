@page "/clientes"

@page "/clientes/{ClienteId:int}"

@* Registro de los clientes *@

@inject AuthenticationStateProvider Authentication

@inject IToastService Toast

@inject ClientesBLL clientesBLL

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="rz-border-radius-4 shadow bg-white d-block p-2 border border-4"
        style="margin: auto; width: 800px; height: 670px;">
        <div class="rz-border-radius-4 shadow card-header text-center">
            <h3>Registro Clientes</h3>
        </div>

        <div class="rz-border-radius-4 shadow border border-4 card card-body" style="width: 780px; height: 500px;">
            <div class="container overflow-hidden">
                <form class="row gy-3">
                    <p />
                    @*...................... Nombre ......................*@


                    <div class="form-group col-1" style="width: 360px; height: 80px;">
                        <label class="form-label">Nombre</label>
                        <InputText @bind-Value="clientes.Nombre" placeholder="Ingresar nombre"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => clientes.Nombre)" />
                    </div>
                    <br />

                    @*...................... Email ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="clientes.Email" placeholder="Correro electronico"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => clientes.Email)" />
                    </div>
                    <br />
                    @*...................... Cedula ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Cédula</label>
                        <InputText @bind-Value="clientes.Cedula" placeholder="Numero de cédula"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => clientes.Cedula)" />
                    </div>
                    @*...................... Ciudad ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Ciudad
                            <div class="oi oi-map-marker" />
                        </label>
                        <InputText @bind-Value="clientes.Ciudad" placeholder="Ciudad"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => clientes.Ciudad)" />
                    </div>

                    @*...................... Telefono ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Teléfono</label>
                        <InputText @bind-Value="clientes.Telefono" placeholder="Numero teléfonico"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => clientes.Telefono)" />
                    </div>

                    @*...................... Celular ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Celular <div class="oi oi-phone"></div></label>
                        <InputText @bind-Value="clientes.Celular" placeholder="Celular"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => clientes.Celular)" />
                    </div>

                    @*...................... Consultar clientes ......................*@

                    <p/>
                    <p/>
                    <div class="form-group col-3" style="margin: auto;">
                        <a class="rz-border-radius-4 shadow border border-4 btn btn-lg btn btn-warning"
                            data-toggle="tooltip" data-placement="right" title="Ingresar a la consulta"
                            href="lista">Clientes
                            <span class="oi oi-people">
                            </span>
                        </a>
                    </div>
                </form>
            </div>
        </div>

        @*...................... Botones ......................*@

        <div class="shadow border border-4 rz-border-radius-4 card-footer d-flex justify-content-center"
            style="width: 780px; height: 90px;">
            <div class="btn-group" role="group">
                <button type="button" style="width: 150px; height: 60px;"
                    class="rz-border-radius-4 shadow border border-4 btn btn-lg btn-primary" @onclick="Nuevo">
                    <span class="oi oi-file"> Nuevo</span>
                </button>

                <button type="submit" style="width: 150px; height: 60px;"
                    class="rz-border-radius-4 shadow border border-4 btn-lg btn-success">
                    <span class="oi oi-document"> Guardar</span>
                </button>

                <button type="button" style="width: 150px; height: 60px;"
                    class="rz-border-radius-4 shadow border border-4 btn btn-lg btn-danger" @onclick="Eliminar">
                    <span class="oi oi-trash"> Eliminar</span>
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int ClienteId { get; set; }

#nullable disable // Para quitar el aviso de nulls
    Clientes clientes = new Clientes();

    //-----------------------------------------------------------------------
    protected override void OnInitialized()
    {
        clientes = new Clientes();

        clientes.ClienteId = ClienteId;
        Buscar();
    }

    public void Nuevo() // Nuevo cliente
    {
        clientes = new Clientes();

    }

    public void Guardar() // Guardar cliente
    {
        var cliente2 = clientesBLL.ExisteCedula(clientes.Cedula);

        if (cliente2 == null) //si no existe lo guarda
        {

            if (clientesBLL.Guardar(clientes))
            {

                Toast.ShowSuccess($"Cliente: {clientes.Nombre}, Guardado correctamente");
                clientes = new Clientes();
            }
            else
                Toast.ShowError("No se pudo guardar");

        }
        else // si existe, no guarda porque esa cedula pertenece a otra persona
        {
            if (cliente2.Cedula.ToLower() == clientes.Cedula.ToLower() && cliente2.ClienteId == clientes.ClienteId)
            {
                if (clientesBLL.Guardar(clientes))
                {

                    Toast.ShowSuccess($"Cliente: {clientes.Nombre}, Guardado correctamente");
                    clientes = new Clientes();
                }

                else
                    Toast.ShowError("No fue posible guardar");
            }
            else
            {
                Toast.ShowError($"Cedula: {clientes.Cedula}, pertenece a otra persona");
            }


        }
    }

    public void Buscar() // Buscar cliente
    {
        if (this.clientes.ClienteId > 0)
        {
            var Cliente = clientesBLL.Buscar(clientes.ClienteId);

            if (Cliente != null)
            {
                clientes = Cliente;

                Toast.ShowSuccess($"Cliente: {clientes.Nombre}, encontrado ");
            }
            else
            {
                Toast.ShowWarning($"No existe un cliente con este Id: {clientes.ClienteId}");
            }
        }
    }

    public async Task Eliminar() // Eliminar cliente
    {
        var Buscarr = clientesBLL.Buscar(clientes.ClienteId);
        bool Eliminar;
        if (Buscarr != Buscarr)
        {
            clientes = Buscarr;
            Toast.ShowSuccess($"Cliente: {clientes.Nombre}, ya existe");
            Eliminar = await clientesBLL.Eliminar(clientes.ClienteId);

        }
        else
        {
            Eliminar = await clientesBLL.Eliminar(clientes.ClienteId);
        }
    }
}