@page "/articulo"

@page "/articulo/{ArticuloId:int}"

@* Registro de articulos *@

@inject AuthenticationStateProvider Authentication

@inject IToastService Toast

@inject ArticuloBLL articuloBLL

@inject CategoriaBLL categoriaBLL

<EditForm Model="articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="rz-border-radius-4 shadow bg-white d-block p-2 border border-4"
        style="margin: auto; width: 800px; height: 670px;">
        <div class="rz-border-radius-4 shadow card-header text-center">
            <h3>Registro Articulos <span class="oi oi-beaker"></span></h3>
        </div>

        <div class="rz-border-radius-4 shadow border border-4 card card-body" style="width: 780px; height: 500px;">
            <div class="container overflow-hidden">
                <form class="row gy-3">

                    @*...................... Nombre ......................*@

                    <p />
                    <p />
                    <div class="form-group col-1" style="width: 360px; height: 80px;">
                        <label class="form-label">Nombre</label>
                        <InputText @bind-Value="articulo.Nombre" placeholder="Ingresar nombre"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => articulo.Nombre)" />
                    </div>

                    @*...................... Fecha ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Fecha de creación</label>
                        <InputDate @bind-Value="articulo.FechaCreacion" class="form-control" />
                        <ValidationMessage For="@(() => articulo.FechaCreacion)" />
                    </div>

                    @*...................... Categoria ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Categoria<div class="oi oi-sort-ascending"></div></label>
                        <InputSelect @bind-Value="articulo.CategoriaId"
                            class="rz-border-radius-2 shadow shadow form-control">
                            <option value="0" disabled selected>Seleccione una categoria</option>
                            @foreach (var item in CategoriaList)
                            {
                                <option value="@item.CategoriaId">@item.Descripcion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => articulo.CategoriaId)" />
                    </div>

                    @*...................... Cantidad ......................*@

                    <div class="form-group col-3" style="width: 360px; height: 80px;">
                        <label class="form-label">Cantidad</label>
                        <InputNumber @bind-Value="articulo.Cantidad"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => articulo.Cantidad)" />
                    </div>

                    @*...................... Costo / Unidad ......................*@

                    <div class="form-group" style="width: 200px; height: 80px;">
                        <label class="form-label">Costo / Unidad</label>
                        <InputNumber @bind-Value="articulo.Costo"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => articulo.Costo)" />
                    </div>

                    @*...................... Selección del suplidor ......................*@

                    <div class="form-group col-2" style="width: 240px; height: 80px;">
                        <label class="form-label" >Suplidor<div class="oi oi-sort-ascending"></div></label>
                        <InputSelect @bind-Value="articulo.SuplidorId" class="rz-border-radius-2 shadow shadow form-control">
                            <option value="0" disabled selected>Seleccione un suplidor</option>
                            @foreach (var item in suplodorList)
                            {
                                <option value="@item.SuplidorId">@item.NombreSuplidor</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => articulo.SuplidorId)" />
                    </div>

                    <br>

                    @*...................... Precio ......................*@

                    <div class="form-group" style="width: 150px; height: 80px;">
                        <label class="form-label">Precio</label>
                        <InputNumber @bind-Value="articulo.Precio"
                            class="rz-border-radius-2 shadow shadow form-control" />
                        <ValidationMessage For="@(() => articulo.Precio)" />
                    </div>

                    @*...................... ITBIS ......................*@

                    <div class="form-group col-md-2" style="margin: auto;">
                        <label class="form-label">ITBIS</label>
                        <input type="number" disabled="true" @bind="articulo.ITBIS"
                            class="rz-border-radius-2 shadow shadow form-control"/>
                        <ValidationMessage For="@(() => articulo.ITBIS)" />
                    </div>

                    @*...................... Consultar Articulo ......................*@

                    <p/>
                    <p/>
                    <div class="form-group col-md-3" style="margin: auto;">
                    <a class="rz-border-radius-4 shadow border border-4 btn btn-lg btn btn-warning"
                    data-toggle="tooltip" data-placement="right" title="Ingresar a la consulta" href="listas">Articulos
                    <span class="oi oi-beaker">
                    </span>
                    </a>
                    </div>
                </form>
            </div>
        </div>

        @*...................... Botones ......................*@

        <div class="shadow border border-4 rz-border-radius-4 card-footer d-flex justify-content-center"
            style="width: 780px; height: 90px;">
            <div class="btn-group" role="group">
                <button type="button" style="width: 150px; height: 60px;"
                    class="rz-border-radius-4 shadow border border-4 btn btn-lg btn-primary" @onclick="Nuevo">
                    <span class="oi oi-file"> Nuevo</span>
                </button>

                <button type="submit" style="width: 150px; height: 60px;"
                    class="rz-border-radius-4 shadow border border-4 btn-lg btn-success">
                    <span class="oi oi-document"> Guardar</span>
                </button>

                <button type="button" style="width: 150px; height: 60px;"
                    class="rz-border-radius-4 shadow border border-4 btn btn-lg btn-danger" @onclick="Eliminar">
                    <span class="oi oi-trash"> Eliminar</span>
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int ArticuloId { get; set; }

    #nullable disable // Para quitar el aviso de nulls
    Articulos articulo = new Articulos();
    List<Categoria> CategoriaList = new List<Categoria>();
    List<Suplidor> suplodorList = new List<Suplidor>();

    //-----------------------------------------------------------------------

    protected override async Task OnInitializedAsync()
    {
        articulo = new Articulos();
        CategoriaList = await categoriaBLL.GetList(c => true);
        articulo.ArticuloId = ArticuloId;
        articulo.ITBIS = 0.18f;
        Buscar();
    }

    public async Task Nuevo() // Nuevo articulo
    {
        articulo = new Articulos();
        CategoriaList = await categoriaBLL.GetList(c => true);
    }

    public void Guardar() // Guardar articulo
    {
        if (articulo.Precio < articulo.Costo)
        {
            Toast.ShowWarning("El precio debe ser mayor al costo"); // Validacion
            return;
        }

        var articulo2 = articuloBLL.ExisteNombre(articulo.Nombre);
        if (articulo2 == null) //si no existe
        {
            if (articuloBLL.Guardar(articulo))
            {

                Toast.ShowSuccess($"Articulo: {articulo.Nombre}, Guardado correctamente");
                articulo = new Articulos();
            }
            else
                Toast.ShowError("No fue posible guardar");

        }
        else // si existe
        {
            if (articulo2.Nombre.ToLower() == articulo.Nombre.ToLower() && articulo2.ArticuloId == articulo.ArticuloId)
            {
                if (articuloBLL.Guardar(articulo))
                {


                    Toast.ShowSuccess($"Articulo: {articulo.Nombre}, Guardado correctamente");
                    articulo = new Articulos();
                }
                else
                    Toast.ShowError("No fue posible guardar");
            }
            else
            {
                Toast.ShowError($"Articulo: {articulo.Nombre}, ya esta registrado");
            }
        }
    }

    public void Buscar() // Buscar articulo
    {

        if (this.articulo.ArticuloId > 0)
        {
            var Articulo = articuloBLL.Buscar(articulo.ArticuloId);

            if (Articulo != null)
            {
                articulo = Articulo;

                Toast.ShowSuccess($"Articulo: {articulo.Nombre}, encontrado ");

            }
            else
            {
                Toast.ShowWarning($"No existe un articulo con este Id: {articulo.ArticuloId}");
            }
        }
    }

    public async Task Eliminar() // Eliminar articulo
    {
        bool Eliminar;

        Eliminar = await articuloBLL.Eliminar(articulo.ArticuloId);

        if (Eliminar)
        {
            articulo = new Articulos();
            CategoriaList = await categoriaBLL.GetList(c => true);
            Toast.ShowSuccess("Eliminado correctamente");
        }
        else
            Toast.ShowError("No fue posible eliminar");

    }
}

